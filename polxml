#!/usr/bin/env python
# polxml.py - add Drude oscillators to OpenMM xml force field file.
# Agilio Padua <agilio.padua@ens-lyon.fr>
# version 2021/04/19


import argparse
import random
import xml.etree.ElementTree as ET


usage = """
==============================================================================
Add Drude oscillators to OpenMM xml force field file and pdb.
------------------------------------------------------------------------------
Format of file containing specification of Drude oscillators (alpha.ff):
  # type  dm/u  dq/e  k/(kJ/molA2)  alpha/A3  thole
  C3H     1.0   0.0   4184.0        1.016     2.6
  ...
* dm is the mass to place on the Drude particle (subtracted from its core),
* dq is the charge to place on the Drude particle (subtracted from its core),
* k is the harmonic force constant of the bond between core and Drude,
* alpha is the polarizability, hyrdogen aroms are not merged,
* thole is a parameter of the Thole damping function.
------------------------------------------------------------------------------
A Drude particle is created for each atom in the xml file
that corresponds to an atom type given in the Drude file.
This script will add new atom types, new bond types, new atoms and
new bonds to the xml file and new particles to the pdb file.
==============================================================================
"""

# --------------------------------------

class PDB(object):
    '''configuration from pdb file'''

    def __init__(self, pdbfile):
        self.box = ''
        self.atoms = []
        self.bonds = []

        with open(pdbfile, 'r') as f:
            line = f.readline()
            while 'CRYST1' not in line:
                line = f.readline()
            self.box = line.strip()
            line = f.readline()
            while not (line.startswith('ATOM') or line.startswith('HETATM')):
                line = f.readline()
            while 'ATOM' in line or 'HETATM' in line:
                atom = {}
                atom['n'] = int(line[6:11])
                atom['name'] = line[12:16].strip()
                atom['mol'] = line[17:20].strip()
                atom['seq'] = int(line[22:26])
                atom['x'] = float(line[30:38])
                atom['y'] = float(line[38:46])
                atom['z'] = float(line[46:54])
                atom['ele'] = line[76:78].strip()
                atom['nH'] = 0         # number of bonded H
                self.atoms.append(atom)
                line = f.readline()
            while 'CONECT' in line:
                i = int(line[6:11])  - 1
                j = int(line[11:16]) - 1
                if self.atoms[i]['seq'] != self.atoms[j]['seq']:
                    print('bond atoms {0:d} and {1:d} not in same molecule'.format(i, j))
                    exit(1)
                self.bonds.append({'i': i, 'j': j})
                line = f.readline()

    def write(self, pdbfile):
        '''write PDB file'''

        with open(pdbfile, 'w') as f:
            f.write('TITLE     created by polxml\n')
            f.write('REMARK    includes Drude particles\n')
            f.write(self.box + '\n')
            n = 0
            for at in self.atoms:
                n += 1
                f.write('HETATM{0:5d} {1:4s} {2:3s}  {3:4d}    '\
                        '{4:8.3f}{5:8.3f}{6:8.3f}  1.00  0.00          '\
                        '{7:>2s}\n'.format(n, at['name'], at['mol'], at['seq'],
                        at['x'], at['y'], at['z'], at['ele']))
            for bd in self.bonds:
                f.write('CONECT{0:5d}{1:5d}\n'.format(bd['i']+1, bd['j']+1))
            f.write('END\n')

    def polarize(self, ff, eps=0.05):
        '''add Drude particles and bonds to PDB'''

        dplist = []
        residues = ff.root.find('Residues')
        for res in residues:
            resname = res.get('name').replace('-', '').replace('+', '')[:3]
            for ffatom in res.iter('Atom'):
                atname = ffatom.get('name')
                if atname[0] == 'D':
                    dp = {'name': atname,
                          'core': atname[1:],
                          'mol': resname}
                    dplist.append(dp)

        # add drude particles after each core
        natoms = len(self.atoms)
        random.seed(1234)
        i = 0
        while i < natoms:
            atom = self.atoms[i]
            for dp in dplist:
                if atom['mol'] == dp['mol'] and atom['name'] == dp['core']:
                    ndp = {}
                    ndp['name'] = dp['name']
                    ndp['mol'] = atom['mol']
                    ndp['seq'] = atom['seq']
                    ndp['x'] = atom['x'] + eps * (2*random.random() - 1.0)
                    ndp['y'] = atom['y'] + eps * (2*random.random() - 1.0)
                    ndp['z'] = atom['z'] + eps * (2*random.random() - 1.0)
                    ndp['ele'] = 'EP'
                    i += 1
                    self.atoms.insert(i, ndp)
                    natoms += 1
                    # increment indices in bonds
                    for bond in self.bonds:
                        if bond['i'] >= i:
                            bond['i'] += 1
                        if bond['j'] >= i:
                            bond['j'] += 1
                    # no need to add DC-CP bonds
                    #self.bonds.append({'i': i - 1, 'j': i})
                    break
            i += 1

# --------------------------------------

fpe0 =  0.000719756                     # (4 Pi eps0) in e^2/(kJ/mol A)

class Drude(object):
    """specification of drude oscillator types"""

    def __init__(self, drudefile, config, ff):
        self.types = []
        self.alpha_H = 0.323           # PCCP 20(2018)10992

        with open(drudefile, "r") as f:

            # search for polarizability of H
            for line in f:
                line = line.strip()
                if line.startswith('#') or len(line) == 0:
                    continue
                if line.startswith('H'):
                    tok = line.split()
                    self.alpha_H = float(tok[4])
                    break
            f.seek(0)

            self.countbondedH(config)

            for line in f:
                line = line.strip()
                if line.startswith('#') or len(line) == 0:
                    continue
                tok = line.split()

                if tok[0].startswith('H'):
                    if float(tok[4]) != self.alpha_H:
                        print('warning: different polarizabilities for H')
                    continue

                drude = {}
                drude['type'] = tok[0]
                drude['dm'] = float(tok[1])
                # dq = float(tok[2])
                drude['k'] = float(tok[3])
                alpha = float(tok[4])
                drude['thole'] = float(tok[5])
                
                ffatoms = []
                for res in ff.root.iter('Residue'):
                    ffatoms.extend([at for at in res.iter('Atom') if \
                        drude['type'] == at.get('type').split('-')[1]])
                
                # checks all maching atom types from field.xml
                # checks number of H attached to same non-bonded type 
                if len(ffatoms) > 0:
                    nH = []
                    for a in ffatoms:
                        for att in config.atoms:
                            if att['name'] == a.attrib['name'] and a.attrib['type'].split('-')[0] == att['mol']:
                                nH.append(att['nH'])
                                break
                    
                    alpha += att['nH'] * self.alpha_H
                    if len(list(set((nH)))) > 1 :
                        #print('warning: {0} non-bonded type has different number of hydrogens attached {1} in {2}; value of {3:.3f} assigned '.format(drude['type'],nH,[x.attrib['type'] for x in ffatoms], alpha))
                        raise RuntimeError('{0} non-bonded type should have the same number of hydorgent attached: {1} hydrogens in {2}'.format(drude['type'],nH,[x.attrib['type'] for x in ffatoms]))

                drude['alpha'] = alpha

                dq = (fpe0 * drude['k'] * alpha)**0.5
                drude['dq'] = -abs(dq)

                self.types.append(drude)

    def countbondedH(self, config):
        '''count H bonded to each atom to merge polarizabilities'''

        for bd in config.bonds:
            i = bd['i']
            j = bd['j']
            if config.atoms[i]['name'][0] in 'Hh':
                config.atoms[j]['nH'] += 1
            elif config.atoms[j]['name'][0] in 'Hh':
                config.atoms[i]['nH'] += 1


# --------------------------------------

def indent_xml(elem, level=0, hor=' ', ver='\n'):
    '''pretty-print xml tree'''

    spc = ver + level * hor
    if len(elem):
        if not elem.text or not elem.text.strip():
            elem.text = spc + hor
        if not elem.tail or not elem.tail.strip():
            elem.tail = spc
        for elem in elem:
            indent_xml(elem, level + 1, hor, ver)
        if not elem.tail or not elem.tail.strip():
            elem.tail = spc
    else:
        if level and (not elem.tail or not elem.tail.strip()):
            elem.tail = spc


class Forcefield(object):
    '''force field from OpenMM xml file'''

    def __init__(self, infile):
        '''element tree from xml file'''

        self.ftree = ET.parse(infile)
        self.root = self.ftree.getroot()

    def write(self, outfile):
        '''write force field to xml file'''

        indent_xml(self.root)
        self.ftree.write(outfile)

    def polarize(self, drude):
        '''add Drude dipoles to force field'''
        
        atomtypes = self.root.find('AtomTypes')
        for atom in atomtypes:
            atname = atom.get('name')
            tok = atname.split('-')
            # avoid recursion if mol name same as atom type (ex Cl)
            if atname[0] == 'D' and len(tok) > 3:
                continue
            ffname = tok[1]
            for dt in drude.types:
                if ffname == dt['type']:
                    # add DP to AtomTypes
                    dp = ET.SubElement(atomtypes, 'Type')
                    dp.set('name', 'D-' + atname)
                    dp.set('class', 'DRUD')
                    dp.set('mass', '0.0')
                    # no need to set DP, DC masses: this is done by OpenMM
                    # dp.set('mass', str(dt['dm']))
                    # subtract Drude mass from DC
                    # dcm = float(atom.attrib['mass'])
                    # dcm -= dt['dm']
                    # atom.set('mass', '{0:.4f}'.format(dcm))
                    break

        residues = self.root.find('Residues')
        for residue in residues:
            i = 0
            for atom in residue:
                i += 1
                if atom.tag == 'Atom':
                    atname = atom.get('name')
                    attype = atom.get('type')
                    tok = attype.split('-')
                    # avoid recursion if mol name same as atom type (ex Cl)
                    if attype[0] == 'D' and len(tok) > 3:
                        continue
                    fftype = tok[1]
                    for dt in drude.types:
                        if fftype == dt['type']:
                            dcq = float(atom.get('charge'))
                            # subtract Drude charge from DC
                            dcq -= dt['dq']
                            atom.set('charge', '{0:.5f}'.format(dcq))
                            # insert DP
                            dp = ET.Element('Atom')
                            dp.set('name', 'D' + atname)
                            dp.set('type', 'D-' + attype)
                            dp.set('charge', '{0:.5f}'.format(dt['dq']))
                            residue.insert(i, dp)
                            # no need to add DC-DP bonds
                            #bd = ET.Element('Bond')
                            #bd.set('atomName1', atname)
                            #bd.set('atomName2', 'D' + atname)
                            #residue.append(bd)
                            break

        bdforce = self.root.find('HarmonicBondForce')
        db = ET.SubElement(bdforce, 'Bond')
        db.set('class1', 'X')
        db.set('class2', 'DRUD')
        db.set('length', '0.0')
        db.set('k', '{0:.2f}'.format(drude.types[0]['k'] * 100.0))

        nonbondedforce = self.root.find('NonbondedForce')
        dp = ET.SubElement(nonbondedforce, 'Atom')
        dp.set('class', 'DRUD')
        dp.set('sigma', '1.0')
        dp.set('epsilon', '0.0')

        drudeforce = ET.SubElement(self.root, 'DrudeForce')
        atomtypes = self.root.find('AtomTypes')
        for atom in atomtypes:
            atname = atom.get('name')
            tok = atname.split('-')
            if atname[0] == 'D' and len(tok) > 3 :
                continue
            ffname = tok[1]            
            for dt in drude.types:
                if ffname == dt['type']:
                    dp = ET.SubElement(drudeforce, 'Particle')
                    dp.set('type1', 'D-' + atname)
                    dp.set('type2', atname)
                    dp.set('charge', '{0:.5f}'.format(dt['dq']))
                    dp.set('polarizability', '{0:.7f}'.format(dt['alpha']/1e3))
                    dp.set('thole', str(dt['thole']/2))
                    break

        ljforce = self.root.find('LennardJonesForce')
        dp = ET.SubElement(ljforce, 'Atom')
        dp.set('class', 'DRUD')
        dp.set('sigma', '1.0')
        dp.set('epsilon', '0.0')


# --------------------------------------

def main():
    parser = argparse.ArgumentParser(description = usage,
             formatter_class = argparse.RawTextHelpFormatter)
    parser.add_argument('-f', '--ffdrude', default = 'alpha.ff',
                        help = 'Drude parameter file (default: alpha.ff)')
    parser.add_argument('-e', '--eps', type=float, default = '0.05',
                        help = 'Max DC-DP distance (default: 0.05 A)')
    parser.add_argument('-ix', '--inxml', default = 'field.xml',
                        help = 'input OpenMM xml file (default: field.xml)')
    parser.add_argument('-ox', '--outxml', default = 'field-p.xml',
                        help = 'output OpenMM xml file (default: field-p.xml)')
    parser.add_argument('-ip', '--inpdb', default = 'config.pdb',
                        help = 'PDB file with configuration (default: config.pdb)')
    parser.add_argument('-op', '--outpdb', default = 'config-p.pdb',
                        help = 'PDB file with configuration (default: config-p.pdb)')
    args = parser.parse_args()

    config = PDB(args.inpdb)
    ff = Forcefield(args.inxml)
    drude = Drude(args.ffdrude, config, ff)
    ff.polarize(drude)
    ff.write(args.outxml)
    print('polarizable force field written to', args.outxml)
    print('adding Drude particles to configuration...')
    config.polarize(ff, args.eps)
    config.write(args.outpdb)
    print('configuration written to', args.outpdb)

if __name__ == '__main__':
    main()
